// Openshift project
openshiftProject = "continuous-infra"
DOCKER_REPO_URL = '172.30.254.79:5000'
STABLE_LABEL = "stable"

env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'

// Add new images here
imageList = ["cvengine"]
imageOperations = []

library identifier: "ci-pipeline@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS-Paas-SIG/ci-pipeline"])

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'cvengine-merge-trigger-' + env.ghprbActualCommit
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image DOCKER_REPO_URL + '/' + openshiftProject + '/jenkins-continuous-infra-slave:' + STABLE_LABEL
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Detect Images to Promote") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(openshiftProject) {
                            imageList.each {
                                String tagList = sh(
                                        script: "oc get is -n ${openshiftProject} -o=jsonpath=\'{.items[?(@.metadata.name==\"${it}\")].status.tags[*].tag}\'",
                                        returnStdout: true
                                ).trim()
                                def prTag = tagList.tokenize(' ').find { it == "PR-" + env.ghprbPullId }
                                if (prTag != null) {
                                    echo "Found PR tag: " + prTag + " for image ${it}"
                                    imageOperations.add(it)
                                } else {
                                    echo "No tag found for image ${it}!"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Merge PR and Rebuild Images") {
            steps {
                // lock to make sure only one is allowed at anytime
                lock('merge-and-image-rebuild-lock') {
                    script {
                        // need this for ghprb plugin since it is really
                        // a post build step and it assumes the build is complete.
                        currentBuild.result = 'SUCCESS'
                    }

                    step([$class: 'GhprbPullRequestMerge', allowMergeWithoutTriggerPhrase: false, deleteOnMerge: false, disallowOwnCode: false, failOnNonMerge: false, mergeComment: ' ', onlyAdminsMerge: false])

                    script {
                        openshift.withCluster() {
                            openshift.withProject(openshiftProject) {
                                imageOperations.each {
                                    pipelineUtils.buildStableImage(openshiftProject, it)
                                }
                            }
                        }
                        pipelineUtils.sendPRCommentforTags(imageOperations)
                    }
                }
            }
        }
    }
}

