---

- name: Test playbook
  hosts: all
  become: yes
  environment:
    CV_IMAGE_URL: "{{ ansible_env.CV_IMAGE_URL }}"
    CV_CVDATA_URL: "{{ ansible_env.CV_CVDATA_URL }}"
    CV_CONFIG: "{target_host_platform: {{ lookup('env', 'CV_TARGET_PLATFORM') }}, environment: {atomic-host: [{ip_address: {{hostvars[inventory_hostname]['ansible_ssh_host']}}, machine_name: atomic-host, credentials: {user: {{ hostvars[inventory_hostname]['ansible_ssh_user'] }}, password: {{ hostvars[inventory_hostname]['ansible_ssh_pass'] }}, port: {{ hostvars[inventory_hostname]['ansible_ssh_port'] }}}}]}}"
    CV_ARTIFACTS_DIRECTORY: "{{ ansible_env.CV_ARTIFACTS_DIRECTORY }}"
  tasks:
  - name: Print a debug message
    debug:
      msg: "User: {{ hostvars[inventory_hostname]['ansible_ssh_user'] }}"
  - name: Print a debug message
    debug:
      msg: "Password: {{ hostvars[inventory_hostname]['ansible_ssh_pass'] }}"

  - name: Print a debug message
    debug:
      msg: "Host: {{ hostvars[inventory_hostname]['ansible_ssh_host'] }}"

  - name: Print a debug message
    debug:
      msg: "Port: {{ hostvars[inventory_hostname]['ansible_ssh_port'] }}"

  - name: Print the CV_CONFIG environment variable
    debug:
      msg: "CV_CONFIG: {{ ansible_env.CV_CONFIG }}"

  - name: Run the container validation
    block:
      - local_action: command cvengine
        register: cvengine_command
    always:
      - name: Write the cvengine output to a file
        local_action: copy content={{ cvengine_command.stdout }} dest={{ lookup('env', 'CV_ARTIFACTS_DIRECTORY') }}/cvengine_output.txt
