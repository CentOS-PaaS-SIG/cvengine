/**
 * CI Stage Pipeline Trigger
 *
 * This is a declarative pipeline for the CI stage pipeline
 * that includes the building of a new cvengine image based
 * on a new GitHub PR
 *
 */

// Openshift project
openshiftProject = "continuous-infra"
DOCKER_REPO_URL = '172.30.254.79:5000'

// Defaults for SCM operations
env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/cvengine'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'

// If this PR does not include an image change, then use this tag
STABLE_LABEL = "stable"

// Initialize
tagMap = [:]
tagMap['jenkins-continuous-infra-slave'] = STABLE_LABEL
tagMap['cvengine'] = STABLE_LABEL

library identifier: "ci-pipeline@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS-Paas-SIG/ci-pipeline"])

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'cvengine-ci-' + env.ghprbActualCommit
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image DOCKER_REPO_URL + '/' + openshiftProject + '/jenkins-continuous-infra-slave:' + STABLE_LABEL
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Get Changelog") {
            steps {
                node('master') {
                    script {
                        echo "PR number is: ${env.ghprbPullId}"
                        env.changeLogStr = pipelineUtils.getChangeLogFromCurrentBuild()
                        echo env.changeLogStr
                    }
                    writeFile file: 'changelog.txt', text: env.changeLogStr
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'changelog.txt'
                }
            }
        }
        stage("Setup Container Templates") {
            steps {
                script {
                    pipelineUtils.setupContainerTemplates(openshiftProject)
                }
            }
        }
        stage("cvengine image build") {
            steps {
                script {
                    tagMap['cvengine'] = pipelineUtils.buildImage(openshiftProject, "cvengine")
                }
            }
        }
        stage("Image Tag Report") {
            steps {
                script {
                    // Use tags derived from above image builds
                    //
                    pipelineUtils.printLabelMap(tagMap)
                }
            }
        }
        stage("Run Stage Jobs") {
            failFast true
            parallel {
                stage("cvengine job") {
                    steps {
                        sleep 30
                        build job: 'container-validation',
                                parameters: [
                                        string(name: 'CVENGINE_TAG', value: tagMap['cvengine'])
                                ],
                                wait: true
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                String prMsg = ""
                if (env.ghprbActualCommit != null && env.ghprbActualCommit != "master") {
                    prMsg = "(PR #${env.ghprbPullId} ${env.ghprbPullAuthorLogin})"
                }
            }
        }
        success {
            echo "yay!"
        }
        failure {
            error "build failed!"
        }
    }
}
